@import Main._
@import scalaworld.Readme._
@import scala.meta.tutorial.BuildInfo

@sect{Macro annotations}
  @p
    Note, Scalameta-based macro annotations will soon be superseded by
    @lnk{https://github.com/scalamacros/scalamacros}, see also
    @lnk{https://github.com/scalacenter/advisoryboard/pull/30}.
    Scalameta-based macro annotations have several limitations such as
    not working with
    @ul
      @li
        @lnk("ENSIME/ScalaIDE", "https://github.com/scalameta/paradise/pull/218"), (although IntelliJ support is good)
      @li
        @lnk("Scala REPL/console", "https://github.com/scalameta/paradise/issues/10")
      @li
        @lnk("Scaladoc", "https://github.com/scalameta/paradise/issues/216")
      @li
        @lnk("Scoverage", "https://github.com/scalameta/paradise/issues/201")
    In addition, efforts to support def macros and Dotty have been moved to
    scalamacros/scalamacros.
    New scalameta/paradise bug reports or feature requests will not be addressed.
    New scalameta/paradise pull requests to fix known issues will continue to be
    reviewed and we are happy to cut new releases with contributed fixes.

  @sect{Setup build}
    It's possible to write macro annotations on Scalameta trees using
    the Scalameta paradise compiler plugin.
    To configure the Scalameta paradise plugin, you need to enable it in your build
    for both the projects that define macro annotation and the projects
    that use macro annotations
    @hl.scala
      lazy val macroAnnotationSettings = Seq(
        addCompilerPlugin("org.scalameta" % "paradise" % "@BuildInfo.paradise" cross CrossVersion.full),
        scalacOptions += "-Xplugin-require:macroparadise",
        scalacOptions in (Compile, console) ~= (_ filterNot (_ contains "paradise")) // macroparadise plugin doesn't work in repl yet.
      )
      // Requires scalaVersion @BuildInfo.scala211 or @BuildInfo.scala212
      lazy val projectThatDefinesMacroAnnotations = project.settings(
        libraryDependencies += "org.scalameta" %% "scalameta" % "@BuildInfo.scalameta1" % Provided,
        macroAnnotationSettings
        // ... your other project settings
      )
      lazy val projectThatUsesMacroAnnotations = project.settings(
        macroAnnotationSettings,
        // ... your other project settings
      )

    These settings are already configured in the tutorial repo.
    Once you are setup, run
    @hl.scala
      macros/test:run

  @sect{Tips}
    @ul
      @li
        See @lnk{https://github.com/scalameta/scalameta/blob/master/notes/quasiquotes.md}
        for how to construct quasiquotes.
      @li
        If you are unsure how to pattern match or construct a tree, you can use @code{.structure}
        @hl.scala
          > import scala.collection.immutable.Seq
          > println(q"def foo[A <: B](implicit e: A): A".structure)
          Decl.Def(Nil, Term.Name("foo"), Seq(Type.Param(Nil, Type.Name("A"), Nil, Type.Bounds(None, Some(Type.Name("B"))), Nil, Nil)), Seq(Seq(Term.Param(Seq(Mod.Implicit()), Term.Name("e"), Some(Type.Name("A")), None))), Type.Name("A"))
          > Decl.Def(Nil, Term.Name("foo"), Seq(Type.Param(Nil, Type.Name("A"), Nil, Type.Bounds(None, Some(Type.Name("B"))), Nil, Nil)), Seq(Seq(Term.Param(Seq(Mod.Implicit()), Term.Name("e"), Some(Type.Name("A")), None))), Type.Name("A")).syntax
          res5: String = "def foo[A <: B](implicit e: A): A"

  @sect{Hello World}
    Here is an example macro annotation:

    @hl.ref(wd/'macros/'src/'main/'scala/'scalaworld/'macros/"Main.scala")

    The annotation wraps the body of an object into a @code{main} function,
    serving a similar function as extending @code{App}.

  @sect{Class2Map}
    Implement a @code{Class2Map} macro annotation that injects a @code{toMap} method
    that creates a @code{Map[String, Any]} from the fields of this class.

    @p
      Solution:
      @hl.ref(wd/'macros/'src/'main/'scala/'scalaworld/'macros/"Class2Map.scala")

  @sect{WithApply}
    Implement a @code{WithApply} macro annotation that creates a @code{apply}
    method to construct an instance of the class (just like is created for case classes).

    @p
      The challenge here is to handle the companion object correctly.

      @ul
        @li
          If the companion object exists, add the @code{apply} method to it.
        @li
          If the companion object doesn't exists, create it.
    @p
      Solution:
      @hl.ref(wd/'macros/'src/'main/'scala/'scalaworld/'macros/"WithApply.scala")

  @sect{Debug}
    Open up @code{Debug.scala} and implement a @code{Debug} macro annotation
    for @b{methods} that:

    @ul
      @li
        Prints out the argument names and their values at the beginning of the method.
      @li
        Prints out the time it took to run the method.
      @li
        Prints out the value of the method result.

    @p
      Solution:
      @hl.ref(wd/'macros/'src/'main/'scala/'scalaworld/'macros/"Debug.scala")

    For extra credit:
    @ul
      @li
        Expand the method into two methods, where one is the original method
        and the second one has a named suffixed with @code{Debug}
        and that's where the printing happens.

  @sect{generic}
    Implement a @code{generic} macro annotation to automatically derive
    a shapeless @code{Generic[T]} instance.

    @p
      Note, macro annotations are purely syntactic, see @sect.ref{How do I get the type of a tree?}.
      As a result, to find subclasses of a sealed trait, we depend on the assumption
      that all the subclasses are put under the companion class of the sealed
      trait. The implementation below looks inside the companion class and
      extracts definitions of classes which extend the sealed trait.

    @p
      Solution:
      @hl.ref(wd/'macros/'src/'main/'scala/'scalaworld/'macros/"generic.scala")

  @sect{Testing macro annotations}
    See MainTest for an example of to both unit test and integration test a
    macro annotation.
    @hl.ref(wd/'macros/'src/'test/'scala/'scalaworld/'macros/"MainTest.scala")

