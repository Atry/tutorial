@import scalaworld.Tutorial._
@import ammonite.ops._
@import scalaworld.Readme._
@import scala.meta.tutorial.BuildInfo

@sect{Semantic API}
  The semantic API offers operations to query information from the Scala compiler
  such as name resolution (@code{println} => @code{_root_.scala.Predef.println}),
  symbol signatures (@code{_root_.com.Example.main([Ljava/lang/String;)V.} =>
  @code{def main(args: Array[String]): Unit}),
  These operations can for example be used by tools like
  @lnk("Scalafix", "https://scalacenter.github.io/scalafix"),
  @lnk("Metadoc", "http://scalameta.org/metadoc/"),
  @lnk("Metals", "https://geirsson.com/assets/metals/").

  @sect{SemanticDB}
    @p
      SemanticDB is a data model for semantic information about programs in Scala and
      other languages. SemanticDB decouples production and consumption of semantic information,
      establishing documented means for communication between tools.

    @p
      The storage format used for the SemanticDB is defined using
      @lnk("Protocol Buffers", "https://developers.google.com/protocol-buffers/"),
      or "protobuf" for short.  The SemanticDB protobuf schema is small, at
      the time of this writing it is ~60 lines of code.  The full schema is
      available
      @lnk("here",
           "https://github.com/scalameta/scalameta/blob/master/semanticdb/semanticdb2/semanticdb2.proto").
      Files containing SemanticDB binary data use the @code{.semanticdb} file
      extension by convention.

    @p
      At the time of writing, SemanticDB has an experimental status and
      the associated APIs are considered internal. If you'd like to learn more,
      ask on our gitter channel: @gitter
